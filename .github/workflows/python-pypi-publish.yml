name: Publish Python distribution to PyPi
# FIXME: split to requirements and Poetry versions

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: "Target 'package_version' for publication"
      python-version:
        required: false
        type: string
        default: '3.11'
        description: "Required python version"
      pypi-url:
        required: false
        type: string
        default: 'https://upload.pypi.org/legacy/'
        description: 'TODO'
      poetry-version:
        required: false
        type: string
        default: '1.5.1'
        description: 'Poetry version'
      runsOn:
        required: false
        type: string
        default: 'ubuntu-latest'
    secrets:
      pypi-password:
        required: true

jobs:
  publish-to-pypi:
    name: Publish to PyPi
    runs-on: ${{ inputs.runsOn }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check Poetry file existence
        id: check-poetry-file
        uses: andstor/file-existence-action@v3
        with:
          files: "pyproject.toml"

      - name: Setup python ${{ inputs.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Poetry ${{ inputs.poetry-version }}
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        uses: snok/install-poetry@v1
        continue-on-error: true
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: false
      
      - name: Show log
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        continue-on-error: true
        run: cat *.log || true
      
      - name: Set version ${{ inputs.version }} for current build in pyproject.toml
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        run: poetry version ${{ inputs.version }}

      - name: Install dependencies from Poetry
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        run: poetry install

      - name: Build package using Poetry
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        run: poetry build

      - name: Set version ${{ inputs.version }} for current build in package_info.json
        if: steps.check-poetry-file.outputs.files_exists == 'false'
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: './package_info.json'
          key: 'package_version'
          value: ${{ inputs.version }}

      - name: Install dependencies from requirements.txt
        if: steps.check-poetry-file.outputs.files_exists == 'false'
        run: pip install -r requirements.txt

      - name: Build package using setup.py
        if: steps.check-poetry-file.outputs.files_exists == 'false'
        run: python setup.py sdist

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi-password }}
          repository_url: ${{ inputs.pypi-url }}