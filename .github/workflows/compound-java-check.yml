name: Compound Java checks

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: 'ubuntu-latest'
      app-version:
        required: false
        type: string
        default: '0.0.0'
      java-version:
        required: false
        type: string
        default: '11'
      java-vendor:
        required: false
        type: string
        default: 'zulu'
      scanner-enabled:
        required: false
        type: boolean
        default: true
        description: 'Whether vulnerabilities and license scanning are enabled'
      strict-scanner:
        required: false
        type: boolean
        default: true
        description: 'Whether vulnerabilities and license scanning executions are strict'
      multi-project:
        required: false
        type: boolean
        default: false
        description: 'false for dependencyCheckAnalyze, true for dependencyCheckAggregate'
      integration-test-enabled:
        required: false
        type: boolean
        default: false
        description: 'Whether integration test is enabled'
      integration-test-projects:
        required: false
        type: string
        default: "['.']"
        description: 'list of projects for running integration tests'
      integration-test-task:
        required: false
        type: string
        default: 'integrationTest'
        description: "Gradle task name to run integration test"
    secrets:
      nvd-api-key:
        required: false
        description: 'API key to access NVD database'
      cisa-domain:
        required: false
        description: 'Cybersecurity and Infrastructure Security Agency domain'
      cisa-user:
        required: false
        description: 'Cybersecurity and Infrastructure Security Agency user'
      cisa-password:
        required: false
        description: 'Cybersecurity and Infrastructure Security Agency password'
    outputs:
      owasp-scan-status:
        value: ${{ (inputs.strict-scanner && jobs.owasp-scan.result == 'success' || !inputs.strict-scanner) }}
      license-check-status:
        value: ${{ (inputs.strict-scanner && jobs.license-check.result == 'success' || !inputs.strict-scanner) }}
      integration-test-status:
        value: ${{ (inputs.integration-test-enabled && jobs.integration-test.result == 'success' || !inputs.integration-test-enabled) }}
      aggregated-status:
        description: "Aggregated status"
        value: ${{ (inputs.strict-scanner && jobs.owasp-scan.result == 'success' || !inputs.strict-scanner) && (inputs.strict-scanner && jobs.license-check.result == 'success' || !inputs.strict-scanner) && (inputs.integration-test-enabled && jobs.integration-test.result == 'success' || !inputs.integration-test-enabled) }}

jobs:
  owasp-scan:
    name: 'OWASP scan'
    if: inputs.scanner-enabled
    uses: th2-net/.github/.github/workflows/owasp-gradle-scan.yml@integration-tests # FIXME: switch to main branch
    with:
      runsOn: ${{ inputs.runs-on }}
      multiproject: ${{ inputs.multi-project }}
      javaVersion: ${{ inputs.java-version }}
      javaVendor: ${{ inputs.java-vendor }}
    secrets:
        nvd-api-key: ${{ secrets.nvd-api-key }}
        cisa-domain: ${{ secrets.cisa-domain }}
        cisa-user: ${{ secrets.cisa-user }}
        cisa-password: ${{ secrets.cisa-password }}

  license-check:
    name: 'License check'
    if: inputs.scanner-enabled
    uses: th2-net/.github/.github/workflows/license_check.yml@main
    with:
      runsOn: ${{ inputs.runs-on }}
      version: ${{ inputs.app-version }}

  integration-test:
    name: 'Integration tests'
    if: inputs.integration-test-enabled
    strategy:
      matrix:
       integration-test-project: ${{ fromJson(inputs.integration-test-projects) }}
    uses: th2-net/.github/.github/workflows/java-integration-test.yml@integration-tests # FIXME: switch to main branch
    with:
      runs-on: ${{ inputs.runs-on }}
      java-version: ${{ inputs.java-version }}
      java-vendor: ${{ inputs.java-vendor }}
      project-path: ${{ matrix.integration-test-project }}
      integration-test-task: ${{ inputs.integration-test-task }}

  show-statuses:
    name: 'Show statuses'
    runs-on: ${{ inputs.runs-on }}
    if: always()
    needs: 
      - owasp-scan
      - license-check
      - integration-test
    steps:
      - run: |
          echo "owasp-scan:result - ${{ needs.owasp-scan.result }}"
          echo "license-check:result - ${{ needs.license-check.result }}"
          echo "integration-test:result - ${{ needs.integration-test.result }}"
          echo "owasp-scan:status - ${{ (inputs.strict-scanner && needs.owasp-scan.result == 'success' || !inputs.strict-scanner) }}"
          echo "license-check:status - ${{ (inputs.strict-scanner && needs.license-check.result == 'success' || !inputs.strict-scanner) }}"
          echo "integration-test:status - ${{ (inputs.integration-test-enabled && needs.integration-test.result == 'success' || !inputs.integration-test-enabled) }}"