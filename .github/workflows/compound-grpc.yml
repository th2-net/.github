name: Compound gRPC build


on:
  workflow_call:
    inputs:
      build-mode:
        required: false
        type: string
        default: snapshot
        description: "one of build modes: snapshot, dev-release, release"
      project-path:
        required: false
        type: string
        default: '.'
        description: 'relative path to the project'

      java-version:
        required: false
        type: string
        default: '21'
      java-vendor:
        required: false
        type: string
        default: 'zulu'

      python-version:
        required: false
        type: string
        default: '3.11'
        description: "Required python version"

      scanner-enabled:
        required: false
        type: boolean
        default: true
        description: 'Whether vulnerabilities and license scanning are enabled'
      strict-scanner:
        required: false
        type: boolean
        default: true
        description: 'Whether vulnerabilities and license scanning executions are strict'

#       docker-username:
#         required: false
#         type: string
#       build-target:
#         required: true
#         type: string
#         description: 'Use values Docker or Sonatype or both'
#       runsOn:
#         required: false
#         type: string
#         default: 'ubuntu-latest'
#       gradleVersion:
#         required: false
#         type: string
#         default: '7'
#       javaVersion:
#         required: false
#         type: string
#         default: '21'
#       javaVendor:
#         required: false
#         type: string
#         default: 'zulu'
#       devRelease:
#         required: false
#         type: boolean
#         default: false
# # Vulnerability scanning
#       scanner-enabled:
#         required: false
#         type: boolean
#         default: true
#         description: 'Whether vulnerabilities and license scanning are enabled'
#       strict-scanner:
#         required: false
#         type: boolean
#         default: true
#         description: 'Whether vulnerabilities and license scanning executions are strict'
#       trivy-target:
#         required: false
#         type: string
#         default: 'os,library'
#         description: 'What Trivy will scan: image, library or both'
#       trivy-sensitivity:
#         required: false
#         type: string
#         default: 'CRITICAL,HIGH,MEDIUM'
#         description: 'Adjusting the Trivy Scanner Sensitivity'

    # outputs:
    #   version:
    #     description: "Generated version of the image"
    #     value: ${{ jobs.prebuild-job.outputs.version }}
    secrets:
    #   docker-password:
    #     required: false
    #   sonatypeUsername:
    #     required: false
    #   sonatypePassword:
    #     required: false
    #   sonatypeSigningKey:
    #     required: false
    #   sonatypeSigningPassword:
    #     required: false
    #   nvd-api-key:
    #     required: false
    #     description: 'API key to access NVD database'
      cisa-domain:
        required: false
        description: 'Cybersecurity and Infrastructure Security Agency domain'
      cisa-user:
        required: false
        description: 'Cybersecurity and Infrastructure Security Agency user'
      cisa-password:
        required: false
        description: 'Cybersecurity and Infrastructure Security Agency password'

jobs:
  prepare-java-version:
    # runs-on: ubuntu-latest
    uses: th2-net/.github/.github/workflows/java-prepare-version.yml@compound-grpc # FIXME: revert to main
    with:
      release-type: ${{ inputs.build-mode }}
      project-path: ${{ inputs.project-path }}

  prepare-python-version:
    # runs-on: ubuntu-latest
    uses: th2-net/.github/.github/workflows/python-prepare-version.yml@compound-grpc # FIXME: revert to main
    with:
      release-type: ${{ inputs.build-mode }}
      project-path: ${{ inputs.project-path }}

  compare-versions:
    name: "Compare '${{ needs.prepare-java-version.outputs.original-version }}' java and '${{ needs.prepare-python-version.outputs.original-version }}' python project versions"
    runs-on: ubuntu-latest
    needs: [ prepare-java-version, prepare-python-version ]
    steps:
      - name: Compare
        run: |
          if [[ "${{ needs.prepare-java-version.outputs.original-version }}" != "${{ needs.prepare-python-version.outputs.original-version }}" ]]; then
            echo "Java version from ${{ inputs.project-path }}/gradle.properties file isn't matched to Python version from ${{ inputs.project-path }}/pyproject.toml or ${{ inputs.project-path }}/package_info.json file"
            exit 1
          fi

  check-java:
    name: Complex java check
    needs: [ prepare-java-version ]
    uses: th2-net/.github/.github/workflows/compound-java-check.yml@main
    with:
      app-version: ${{ needs.prepare-java-version.outputs.version }}
      java-version: ${{ inputs.java-version }}
      java-vendor: ${{ inputs.java-vendor }}
      scanner-enabled: ${{ inputs.scanner-enabled }}
      strict-scanner: ${{ inputs.strict-scanner }}
    secrets:
      cisa-domain: ${{ secrets.cisa-domain }}
      cisa-user: ${{ secrets.cisa-user }}
      cisa-password: ${{ secrets.cisa-password }}
  
  check-python:
    name: Vulnerabilities python check
    uses: th2-net/.github/.github/workflows/python-scan.yml@compound-grpc # FIXME: revert to main branch
    with:
      python-version: ${{ inputs.python-version }}

#   java-license-check:
#   java-vulnerability-check:
#   python-vulnerability-check:
  
  

#   prebuild-job:
#     name: Prebuild Job
#     uses: th2-net/.github/.github/workflows/compound-prebuild-java-workflow.yml@main
#     with:
#       runsOn: ${{ inputs.runsOn }}
#       devRelease: ${{ inputs.devRelease }}

#   java-check:
#     name: 'Java check'
#     needs: [prebuild-job]
#     uses: th2-net/.github/.github/workflows/compound-java-check.yml@main
#     with:
#       app-version: ${{ needs.prebuild-job.outputs.version }}
#       java-version: ${{ inputs.javaVersion }}
#       java-vendor: ${{ inputs.javaVendor }}
#       scanner-enabled: ${{ inputs.scanner-enabled }}
#       strict-scanner: ${{ inputs.strict-scanner }}
#       integration-test-enabled: ${{ inputs.integration-test-enabled }}
#       integration-test-projects: ${{ inputs.integration-test-projects }}
#       integration-test-task: ${{ inputs.integration-test-task }}
#     secrets:
#       nvd-api-key: ${{ secrets.nvd-api-key }}
#       cisa-domain: ${{ secrets.cisa-domain }}
#       cisa-user: ${{ secrets.cisa-user }}
#       cisa-password: ${{ secrets.cisa-password }}

# # if Docker
#   docker-push:
#     name: Build Docker image and push to ghcr.io
#     if: (contains(inputs.build-target, 'Docker') || contains(inputs.build-target, 'docker')) && !cancelled() && needs.java-check.outputs.aggregated-status == 'true'
#     needs: [prebuild-job, java-check ]
#     uses: th2-net/.github/.github/workflows/compaund-java-docker-push.yml@main
#     with:
#       docker-username: ${{ inputs.docker-username }}
#       runsOn: ${{ inputs.runsOn }}
#       version: ${{ needs.prebuild-job.outputs.version }}
#       versionNumber: ${{ needs.prebuild-job.outputs.version }}
#       javaVersion: ${{ inputs.javaVersion }}
#       javaVendor: ${{ inputs.javaVendor }}
#     secrets:
#       docker-password: ${{ secrets.docker-password }}
#   trivy-docker-scan:
#     name: Scan Docker image for vulnerabilities
#     if: inputs.scanner-enabled && !cancelled() && needs.docker-push.result == 'success'
#     needs: [docker-push, prebuild-job]
#     uses: th2-net/.github/.github/workflows/trivy-scan-github.yml@main
#     with:
#       image-path: ghcr.io/${{ github.repository }}:${{ needs.prebuild-job.outputs.version }}
#       target: ${{ inputs.trivy-target }}
#       sensitivity: ${{ inputs.trivy-sensitivity }}


# # if Sonatype
#   sonatype-push:
#     if: (contains(inputs.build-target, 'Sonatype') || contains(inputs.build-target, 'sonatype')) && !cancelled() && needs.java-check.outputs.aggregated-status == 'true'
#     name: Build and Push Jar to Sonatype
#     needs: [ prebuild-job, java-check ]
#     uses: th2-net/.github/.github/workflows/compaund-java-sonatype-push.yml@main
#     with:
#       runsOn: ${{ inputs.runsOn }}
#       closeAndRelease: true
#       version: ${{ needs.prebuild-job.outputs.version }}
#       javaVersion: ${{ inputs.javaVersion }}
#       javaVendor: ${{ inputs.javaVendor }}
#     secrets:
#       sonatypeUsername: ${{ secrets.sonatypeUsername }}
#       sonatypePassword: ${{ secrets.sonatypePassword }}
#       sonatypeSigningKey: ${{ secrets.sonatypeSigningKey }}
#       sonatypeSigningPassword: ${{ secrets.sonatypeSigningPassword }}

#   create-tag:
#     if: inputs.createTag && !cancelled() && (needs.docker-push.result == 'success' || needs.sonatype-push.result == 'success')
#     name: Create and push tag
#     needs: [ prebuild-job, sonatype-push, docker-push ]
#     uses: th2-net/.github/.github/workflows/compaund-git-tag-push.yml@main
#     with:
#       runsOn: ${{ inputs.runsOn }}
#       tagName: ${{ needs.prebuild-job.outputs.version }}
