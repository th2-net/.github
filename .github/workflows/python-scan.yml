name: Python vulnerabilities scanning


on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
        description: "Required python version"
      poetry-version:
        required: false
        type: string
        default: '1.5.1'
        description: 'Poetry version'
      safety-args:
        required: false
        type: string
        default: ''
        description: 'Arguments for the python safety check'
      project-path:
        required: false
        type: string
        default: '.'
        description: 'relative path to the project'

env:
  DEP_PATH: requirements.txt

jobs:
  scan:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Check Poetry file existence
        id: check-poetry-file
        uses: andstor/file-existence-action@v3
        with:
          files: ${{ inputs.project-path }}/pyproject.toml
      
      - name: Install Poetry ${{ inputs.poetry-version }}
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        uses: snok/install-poetry@v1
        continue-on-error: true
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: false

      - name: Store packages in a file
        run: pip freeze > ${{ inputs.project-path }}/before.txt

      - name: Generate ${{ inputs.project-path }}/requirements.txt from Poetry
        if: steps.check-poetry-file.outputs.files_exists == 'true'
        run: poetry export -f requirements.txt --output ${{ inputs.project-path }}/requirements.txt

      - name: Install requirements
        run: pip install -r ${{ inputs.project-path }}/requirements.txt

      - name: Store updated list of packages in another file
        run: pip freeze > ${{ inputs.project-path }}/after.txt

      - name: Get only the project dependencies
        run: diff ${{ inputs.project-path }}/before.txt ${{ inputs.project-path }}/after.txt | grep '^>' | sed 's/^> //' > diff.txt

      - name: Output the list of packages to be checked
        run: cat ${{ inputs.project-path }}/diff.txt

      - name: Download safety-policy
        run: |
          wget -q -O .safety-policy.yaml https://raw.githubusercontent.com/th2-net/.github/main/vulnerability-compliance/python-safety-check/.safety-policy.yaml
      
      - name: Install safety
        # pip install "marshmallow<4" is workaround to avoid the problem
        # Unhandled exception happened: post_dump() got an unexpected keyword argument 'pass_many'
        # https://github.com/pyupio/safety/issues/711
        run: pip install --upgrade pip && pip install safety && pip install "marshmallow<4"

      - name: Run Vulnerability check
        run: safety check -r ${{ inputs.project-path }}/diff.txt ${{ inputs.safety-args }} --policy-file ${{ inputs.project-path }}/.safety-policy.yaml
