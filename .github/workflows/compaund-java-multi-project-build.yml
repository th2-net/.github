name: Building module in multi-project

on:
  workflow_call:
    inputs:
      runsOn:
        required: false
        type: string
        default: 'ubuntu-latest'
      release:
        required: false
        type: boolean
        default: false
        description: "indicates whether this is a release build or not. If it is not the 'version_suffix' will be generated"
      javaVersion:
        required: false
        type: string
        default: '21'
      javaVendor:
        required: false
        type: string
        default: 'zulu'
      projectPath:
        required: false
        type: string
        default: '.'
        description: "path to the Gradle module. Root directory by default"
      additionalTasks:
        required: false
        type: string
        default: '[]'
        description: "list of additional tasks to execute in JSON format"
      gradleInfo:
        required: false
        type: boolean
        default: false
    secrets:
      sonatypeUsername:
        required: false
      sonatypePassword:
        required: false
      sonatypeSigningKey:
        required: false
      sonatypeSigningPassword:
        required: false

jobs:
  build-gradle:
    name: Build Gradle module ${{ inputs.projectPath }}
    runs-on: ${{ inputs.runsOn }}
    steps:
      - uses: actions/checkout@v5
      - name: Needs publication
        id: check_publish
        run: echo enabled="${{ contains(fromJson(inputs.additionalTasks), 'publish') }}" >> $GITHUB_OUTPUT
      - name: Release publication
        id: close_release
        if: steps.check_publish.outputs.enabled == 'true' && inputs.release
        run: echo "task=closeAndReleaseSonatypeStagingRepository" >> $GITHUB_OUTPUT
      - name: Get branch name
        if: ${{ !inputs.release }}
        id: branch
        run: echo "branch_name=$(echo "${GITHUB_REF#refs/*/}" | sed 's#/#_#g')" >> $GITHUB_OUTPUT
      - name: Get SHA of the commit
        if: ${{ !inputs.release }}
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Compute version suffix
        if: ${{ !inputs.release }}
        id: suffix
        run: echo "value=${{ steps.branch.outputs.branch_name }}-${{ steps.sha.outputs.sha_short }}-SNAPSHOT" >> $GITHUB_OUTPUT
      - name: Set up JDK ${{ inputs.javaVendor }} ${{ inputs.javaVersion }}
        uses: actions/setup-java@v4
        with:
          distribution: ${{ inputs.javaVendor }}
          java-version: ${{ inputs.javaVersion }}
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
      - name: Build with Gradle
        run: ./gradlew -p ${{ inputs.projectPath }} ${{ inputs.gradleInfo && '--info' || '' }} -Pversion_suffix=${{ steps.suffix.outputs.value }} clean build ${{ join(fromJSON(inputs.additionalTasks), ' ') }} ${{ steps.close_release.outputs.task }}
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.sonatypeUsername }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.sonatypePassword }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.sonatypeSigningKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.sonatypeSigningPassword }}
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: github.actor != 'dependabot[bot]' && !cancelled()
        with:
          files: |
            ${{ inputs.projectPath }}/build/test-results/**/*.xml
            ${{ inputs.projectPath }}/build/test-results/**/*.trx
            ${{ inputs.projectPath }}/build/test-results/**/*.json